# Plugins
# ───────

source "%val{config}/utils.kak"

# Load private plugins.
source-dir "%val{config}/private"

# Use plug.kak as plugin manager.
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# Avoid loading plug.kak in plug.kak.
plug "andreyorst/plug.kak" noload

# FZF helpers.
plug "andreyorst/fzf.kak" config %{
    # fzf.kak configuration
} defer fzf %{
    set-option global fzf_highlight_command 'bat'
    set-option global fzf_preview_width '65%'
    set-option global fzf_tmux_popup true
} defer fzf-file %{
    set-option global fzf_file_command 'rg -L --hidden --files --glob=!.git/'
}

plug "andreyorst/smarttab.kak" config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(rust|python|markdown|kak|lisp|scheme|sh|perl|zsh|groovy|nix|yaml) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
    # these languages will use `smarttab' behavior
    hook global WinSetOption filetype=(c|cpp) smarttab
}

# LSP support.
plug "kak-lsp/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{
    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    # define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    # define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    # define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
        set-option window lsp_hover_anchor false
        # lsp-auto-hover-enable
        echo -debug "Enabling LSP for filetype %opt{filetype}"
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
    }

    hook global WinSetOption filetype=(rust) %{
        lsp-inlay-hints-enable global
        set window lsp_server_configuration rust.clippy_preference="on"
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}

plug "ABuffSeagull/kakoune-vue"


# Kakoune
# ───────

# Disable clippy.
set-option -add global ui_options terminal_assistant=none

# Use ripgrep for grep.
set global grepcmd 'rg --column'

# Soft wrap lines.
addhl global/ wrap

# Keep space around cursor.
set-option global scrolloff 5,5

# Autoreload buffers when external modifications is detected.
set-option global autoreload yes

hook global WinCreate ^[^*]+$ %{
    # Display line numbers.
    add-highlighter window/ number-lines

    # Show git-gutter if available.
    git show-diff
}

hook global BufWritePost ^[^*]+$ %{
    # Show git-gutter if available.
    git show-diff
}

# <a-,>: Escape.
map global insert '<a-,>' '<esc>'

# Language-specific
#

hook global WinSetOption filetype=go %{
    set-option window indentwidth 0
}

hook global BufCreate .*[.](tf) %{
    set-option buffer filetype terraform
}

hook global WinSetOption filetype=(terraform|vue|nix|yaml) %{
    set-option window tabstop 2
    set-option window indentwidth 2
}

hook global BufCreate .*[.](hlb) %{
    set-option buffer filetype hlb
}

hook global BufCreate .*[.](svelte) %{
    set-option buffer filetype html
}

# Colorscheme
# ───────────

set-face global comment rgb:787878
set-face global documentation rgb:787878
set-face global MenuBackground rgb:abb2c0,rgb:21252a
set-face global Information rgb:abb2c0,rgb:21252a

# Comment
# ───────

# #: Comment lines in selection.
map global normal '#' ': comment-line<ret>'

# User
# ────

# <space>n: Create new window.
map -docstring 'new window' global user n ': new<ret>'

# <space>h: Show hover info of symbol under cursor.
map -docstring 'hover info for symbol' global user h ': lsp-hover<ret>'

# <space>y: Yank to system clipboard.
map -docstring "yank" global user y ': yank-system %val{selection}<ret>'

def yank-system -override -params 1.. %{
    nop %sh{
        encoded=$(printf %s "$1" | base64 | tr -d '\n')
        printf "\e]52;;%s\e\\" "$encoded" >/dev/tty
    }
}

# map -docstring "yank" global user y '<a-|>clipboard<ret>'

# Yank always overrides system clipboard
# hook global RegisterModified '"' %{ nop %sh{
# 	encoded=$(printf %s "$kak_main_reg_dquote" | base64 | tr -d '\n')
#         printf "\e]52;;%s\e\\" "$encoded" >/dev/tty
# }}

# ,P: Paste before line from system clipboard.
# map -docstring 'paste before' global user P '!wl-paste -n<ret>'

# ,p: Paste after line from system clipboard.
# map -docstring 'paste after' global user p '<a-!>wl-paste -n<ret>'

# ,s: Show snippets for current window
# map -docstring "show snippets" global user s ': snippets-info<ret>'

# Goto
# ────

# gd: Goto definition of symbol under cursor.
map -docstring 'definition' global goto d '<esc>: lsp-definition<ret>'

# gr: Goto references of symbol under cursor.
map -docstring 'references' global goto r '<esc>: lsp-references<ret>'

# gs: Goto symbols in document.
map -docstring 'symbols' global goto s '<esc>: lsp-document-symbol<ret>'

# gf: Goto file in workspace.
map -docstring 'file' global goto f '<esc>: fzf-mode<ret>f<ret>'

# Workspace
# ─────────

declare-user-mode workspace

# gw: Enter workspace user mode.
map -docstring 'workspace' global goto w '<esc>: enter-user-mode workspace<ret>'

# gwl: Search for string by literal query in workspace.
map -docstring 'literal' global workspace l '<esc>: grep -F<space>'

# gwg: Search for string by regexp query in workspace.
map -docstring 'regexp' global workspace r '<esc>: grep<space>'

# gws: Search for symbols in workspace.
map -docstring 'symbols' global workspace s '<esc>: lsp-workspace-symbol-incr<ret>'

# gwe: Search for errors in workspace.
map -docstring 'errors' global workspace e '<esc>: lsp-find-error<ret>'

# Next
# ────

declare-user-mode next

# gn: Enter next user mode.
map -docstring 'next' global goto n '<esc>: enter-user-mode next<ret>'

# gns: Goto next symbol
map -docstring 'symbol' global next s '<esc>: lsp-next-symbol<ret>'

# gnf: Goto next function
map -docstring 'function' global next f '<esc>: lsp-next-function<ret>'

# gne: Goto next error match
map -docstring 'error' global next e '<esc>: lsp-find-error<ret>'

# gng: Goto next grep match
map -docstring '*grep*' global next g '<esc>: grep-next-match<ret>'

# gnl: Goto next lsp-goto match
map -docstring '*goto*' global next l '<esc>: lsp-next-location *goto*<ret>'

# gnc: Goto next conflicts match
map -docstring '*conflicts*' global next c '<esc>: git-conflicts-next-match<ret>'

# Previous
# ────────

declare-user-mode prev

# gp: Enter prev user mode.
map -docstring 'prev' global goto p '<esc>: enter-user-mode prev<ret>'

# gps: Goto previous symbol
map -docstring 'symbol' global prev s '<esc>: lsp-previous-symbol<ret>'

# gpf: Goto previous function
map -docstring 'function' global prev f '<esc>: lsp-previous-function<ret>'

# gpe: Goto previous error match
map -docstring 'error' global prev e '<esc>: lsp-find-error --previous<ret>'

# gpg: Goto prev grep match
map -docstring '*grep*' global prev g '<esc>: grep-previous-match<ret>'

# gpl: Goto previous lsp-goto match
map -docstring '*goto*' global prev l '<esc>: lsp-previous-location *goto*<ret>'

# gpc: Goto previous conflicts match
map -docstring '*conflicts*' global prev c '<esc>: git-conflicts-previous-match<ret>'

# Git
# ───

declare-user-mode git

# <a-g>: Enter git user mode.
map global normal <a-g> ': enter-user-mode<space>git<ret>'

# <a-g>s: Show git status.
map -docstring 'status' global git s ': git status<ret>'

# <a-g>c: Show git conflicts.
map -docstring 'conflicts' global git c ': git-show-conflicts<ret>'

# <a-g>b: Show git blame.
map -docstring 'blame' global git b ': tig-blame<ret>'

def tig-blame -override -docstring 'Open blame in tig for current file and line' %{
    # Note here we aren't passing any command on resume of kakoune
    terminal zsh -c "tig blame +%val{cursor_line} %val{buffile}" 
}
